"""
    Главный персонаж

    Класс описывает неигрового персонажа, с которым пользователь может взаимодействовать

    @author     ChazGrant
    @version    1.0
    @todo       Реализовать все методы
"""
class Player:
    def __init__(self, x, y, speed, health, stamina, mana):
        """
            Создаём персонажа, указывая его текущие координаты x и y, скорость передвижения,
            очки здоровья, концентрации и стойкости
            * Поле invincible, отвечающее за неуязвимость изначально равно False
            * Поля сопротивления стихийному урону изначально равны 0
        """
        ...

    def movePlayer(self, offset_x, offset_y):
        """
            Перемещение персонажа на смещение, переданное в параметры метода
        """
        ...

    def handleKey(self, keyboard_key: int) -> function:
        """
            Обработка кнопки

            Обработка нажатий на клавиатуре
                - Перемещение (W, A, S, D)
                - Перекат (Space)
                - Атака (LeftMouseButton)
            
                Аргументы:
                    keyboard_key: код нажатой клавиши
                
                Возвращает:
                    Функцию которая отвечает за нажатую клавишу
        """
        ...

    def addNewAction(self, action_type: int) -> bool:
        """
            Добавляет новое действие персонажу

            Если надет щит, то добавить способность парирования
            Если загрузка меньше 100% добавить способность тяжёлый перекат
            Если загрузка меньше 70% добавить способность средний перекат
            Если загрузка меньше 50% добавить способность лёгкий перекат

            Аргументы:
                action_type: тип действия, которое нужно добавить
                * 0 - парирование
                * 1 - лёгкие перекат
                * 2 - средний перекат
                * 3 - тяжёлый перекат
            Возвращает:
                Успех работы метода
        """
        ...

    def roll(self) -> bool:
        """
            Перекатиться
            
            Если персонаж не находится в состоянии переката то совершить перекат и добавить
            неуязвимость для персонажа

            Возвращает:
                Был ли совершён перекат
        """
        ...

    def restAtBonfire(self):
        """
            Отдых у костра

            Негорящий отдыхает у костра, восстанавливая своё здоровье и очки концентрации
        """
        ...

    def useSpell(self, spell_type: int) -> bool:
        """
            Использовать заклинание

            Если у Негорящего хватает очков концентрации то используется выбранное им заклинание

            Аргументы:
                spell_type: тип заклинания
                * 1_ - пиромантия
                * 2_ - чары
                * 3_ - чудеса
            
            Возвращает:
                Было ли использовано заклинание
        """
        ...

    def getHealthPoints(self) -> int:
        """
            Получить количество очков здоровья игрока

            Возвращает:
                Количество очков здоровья
        """
        ...

    def getManaPoint(self) -> int:
        """
            Получить количество очков концентрации игрока

            Возвращает:
                Количество очков концентрации
        """
        ...

    def getStaminaPoints(self) -> int:
        """
            Получить количество очков стойкости игрока

            Возвращает:
                Количество очков стойкости
        """
        ...

    def getElementalDamageResistance(self, element_type: int) -> float:
        """
            Получить стихийное сопротивление урона

            Аргументы:
                element_type: тип стихийного урона
                * 0 - огонь
                * 1 - яд
                * 2 - молния
                * 3 - холод
                * 4 - смерть
            Возвращает:
                Сопротивление стихийному урону
        """
        ...
